-- 1. 最適なインデックスの作成
-- `user_id` と `login_time` を組み合わせた複合インデックスを作成
CREATE INDEX idx_user_login_time ON login_history (user_id, login_time);

-- 2. インデックスが性能を向上させる理由
/* - **複合インデックスの活用：** 複合インデックス `idx_user_login_time` は、`user_id` と `login_time` の両方を効率的に検索できます。
   - **クエリ条件との一致：** クエリの `WHERE` 句で `user_id` が等価条件（`=`）、`login_time` が範囲条件（`BETWEEN`）で指定されており、インデックスのカラム順序と一致しています。
   - **索引の選択性向上：** `user_id` を先頭に配置することで、最初に特定のユーザーのレコードに絞り込み、その中から `login_time` の範囲検索を行うため、検索範囲が大幅に削減されます。*/

-- 3. `login_time` を単独でインデックス化する場合と、複合インデックスを使用する場合の違い
/* - **単独インデックスの場合：**
     - `login_time` のみにインデックスがあると、`user_id` の条件はインデックスを利用せず、全体のレコードから `login_time` の範囲検索を行うため、効率が悪い。
   - **複合インデックスの場合：**
     - `user_id` と `login_time` の両方を含むインデックスにより、`user_id` でまず絞り込み、その後 `login_time` の範囲検索を行うため、検索効率が高まる。*/
